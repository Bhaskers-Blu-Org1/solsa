// Autogenerated. DO NOT MODIFY
const _SpeechToTextV1 = require('watson-developer-cloud/speech-to-text/v1-generated')

class SpeechToTextV1 {
  constructor (name) {
    this.name = name
    this.secrets = {
      url: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'url' } } },
      apikey: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'apikey' } } }
    }
  }
  async listModels (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listModels(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async recognize (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.recognize(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async registerCallback (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.registerCallback(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async unregisterCallback (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.unregisterCallback(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async checkJobs (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.checkJobs(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createJob (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.createJob(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async checkJob (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.checkJob(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteJob (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteJob(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listLanguageModels (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listLanguageModels(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.createLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async trainLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.trainLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async resetLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.resetLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async upgradeLanguageModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.upgradeLanguageModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listCorpora (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listCorpora(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getCorpus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getCorpus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addCorpus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.addCorpus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteCorpus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteCorpus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listWords (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listWords(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addWords (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.addWords(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getWord (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addWord (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.addWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteWord (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listGrammars (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listGrammars(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getGrammar (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getGrammar(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addGrammar (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.addGrammar(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteGrammar (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteGrammar(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listAcousticModels (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listAcousticModels(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.createAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async trainAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.trainAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async resetAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.resetAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async upgradeAcousticModel (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.upgradeAcousticModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listAudio (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.listAudio(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getAudio (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.getAudio(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addAudio (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.addAudio(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteAudio (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteAudio(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteUserData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _SpeechToTextV1({ iam_apikey: apikey, url })
      }
      this.delegate.deleteUserData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }

  _yaml (archive) {
    const svc = {
      apiVersion: 'ibmcloud.seed.ibm.com/v1beta1',
      kind: 'Service',
      metadata: {
        name: this.name
      },
      spec: {
        service: 'speech-to-text',
        plan: 'lite',
        servicetype: 'IAM'
      }
    }
    archive.addYaml(svc, this.name + '-svc.yaml')
  }
}

module.exports = SpeechToTextV1
