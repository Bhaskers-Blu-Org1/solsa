// Autogenerated. DO NOT MODIFY

const solsa = require('../solsa')
const _TextToSpeechV1 = require('watson-developer-cloud/text-to-speech/v1-generated')

class TextToSpeechV1 extends solsa.Service {
  constructor (name) {
    super(name, true)

    this.url = this.addSecret(`binding-${name}`, 'url')
    this.apikey = this.addSecret(`binding-${name}`, 'apikey')
  }
  async listVoices (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.listVoices(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getVoice (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.getVoice(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async synthesize (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.synthesize(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getPronunciation (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.getPronunciation(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listVoiceModels (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.listVoiceModels(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createVoiceModel (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.createVoiceModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getVoiceModel (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.getVoiceModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateVoiceModel (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.updateVoiceModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteVoiceModel (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.deleteVoiceModel(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listWords (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.listWords(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addWords (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.addWords(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getWord (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.getWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addWord (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.addWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteWord (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.deleteWord(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteUserData (params) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _TextToSpeechV1({ iam_apikey: this.apikey, url: this.url })
      }
      this.delegate.deleteUserData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }

  _yaml (archive) {
    const svc = {
      apiVersion: 'ibmcloud.seed.ibm.com/v1beta1',
      kind: 'Service',
      metadata: {
        name: this.name
      },
      spec: {
        service: 'text-to-speech',
        plan: 'lite',
        servicetype: 'IAM'
      }
    }
    archive.addResource(svc, this.name + '-svc.yaml')
    const binding = {
      apiVersion: 'ibmcloud.seed.ibm.com/v1beta1',
      kind: 'Binding',
      metadata: {
        name: `binding-${this.name}`
      },
      spec: {
        bindingFrom: {
          name: this.name
        },
        servicetype: 'IAM'
      }
    }
    archive.addResource(binding, this.name + '-binding.yaml')
  }
}

module.exports = TextToSpeechV1
