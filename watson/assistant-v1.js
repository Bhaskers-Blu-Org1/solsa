// Autogenerated. DO NOT MODIFY
const _AssistantV1 = require('watson-developer-cloud/assistant/v1')

class AssistantV1 {
  constructor (name) {
    this.name = name
    this.secrets = {
      url: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'url' } } },
      apikey: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'apikey' } } }
    }
  }
  async listCounterexamples (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listCounterexamples(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createCounterexample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createCounterexample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getCounterexample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getCounterexample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateCounterexample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateCounterexample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteCounterexample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteCounterexample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listEntities (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listEntities(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createEntity (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createEntity(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getEntity (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getEntity(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateEntity (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateEntity(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteEntity (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteEntity(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listValues (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listValues(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createValue (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createValue(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getValue (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getValue(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateValue (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateValue(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteValue (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteValue(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listSynonyms (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listSynonyms(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createSynonym (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createSynonym(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getSynonym (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getSynonym(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateSynonym (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateSynonym(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteSynonym (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteSynonym(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listMentions (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listMentions(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listIntents (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listIntents(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createIntent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createIntent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getIntent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getIntent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateIntent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateIntent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteIntent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteIntent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listExamples (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listExamples(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listDialogNodes (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listDialogNodes(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createDialogNode (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createDialogNode(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getDialogNode (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getDialogNode(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateDialogNode (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateDialogNode(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteDialogNode (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteDialogNode(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listWorkspaces (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listWorkspaces(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createWorkspace (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createWorkspace(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getWorkspace (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getWorkspace(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateWorkspace (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateWorkspace(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteWorkspace (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteWorkspace(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async message (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.message(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listLogs (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listLogs(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listAllLogs (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listAllLogs(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteUserData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _AssistantV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteUserData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }

  _yaml (archive) {
    const svc = {
      apiVersion: 'ibmcloud.seed.ibm.com/v1beta1',
      kind: 'Service',
      metadata: {
        name: this.name
      },
      spec: {
        service: 'conversation',
        plan: 'lite',
        servicetype: 'IAM'
      }
    }
    archive.addYaml(svc, this.name + '-svc.yaml')
  }
}

module.exports = AssistantV1
