// Autogenerated. DO NOT MODIFY
const _DiscoveryV1 = require('watson-developer-cloud/discovery/v1-generated')

class DiscoveryV1 {
  constructor (name) {
    this.name = name
    this.secrets = {
      url: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'url' } } },
      apikey: { valueFrom: { secretKeyRef: { name: `binding-${name}`, key: 'apikey' } } }
    }
  }
  async listEnvironments (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listEnvironments(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createEnvironment (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createEnvironment(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getEnvironment (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getEnvironment(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateEnvironment (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateEnvironment(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteEnvironment (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteEnvironment(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async testConfigurationInEnvironment (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.testConfigurationInEnvironment(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listConfigurations (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listConfigurations(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createConfiguration (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createConfiguration(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getConfiguration (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getConfiguration(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateConfiguration (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateConfiguration(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteConfiguration (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteConfiguration(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listCollections (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listCollections(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createCollection (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createCollection(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getCollection (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getCollection(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateCollection (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateCollection(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteCollection (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteCollection(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addDocument (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.addDocument(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getDocumentStatus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getDocumentStatus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateDocument (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateDocument(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteDocument (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteDocument(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listCollectionFields (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listCollectionFields(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async query (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.query(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async queryNotices (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.queryNotices(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listTrainingData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listTrainingData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async addTrainingData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.addTrainingData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteAllTrainingData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteAllTrainingData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getTrainingData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getTrainingData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteTrainingData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteTrainingData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listTrainingExamples (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listTrainingExamples(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createTrainingExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createTrainingExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getTrainingExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getTrainingExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateTrainingExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateTrainingExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteTrainingExample (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteTrainingExample(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listFields (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listFields(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async federatedQuery (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.federatedQuery(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async federatedQueryNotices (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.federatedQueryNotices(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async queryEntities (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.queryEntities(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async queryRelations (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.queryRelations(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listExpansions (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listExpansions(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createExpansions (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createExpansions(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteExpansions (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteExpansions(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteUserData (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteUserData(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createEvent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createEvent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async queryLog (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.queryLog(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getMetricsQuery (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getMetricsQuery(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getMetricsQueryEvent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getMetricsQueryEvent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getMetricsQueryNoResults (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getMetricsQueryNoResults(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getMetricsEventRate (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getMetricsEventRate(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listCredentials (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listCredentials(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createCredentials (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createCredentials(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getSourceCredentials (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getSourceCredentials(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async updateCredentials (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.updateCredentials(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteCredentials (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteCredentials(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getMetricsQueryTokenEvent (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getMetricsQueryTokenEvent(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getTokenizationDictionaryStatus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getTokenizationDictionaryStatus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createTokenizationDictionary (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createTokenizationDictionary(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteTokenizationDictionary (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteTokenizationDictionary(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getStopwordListStatus (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getStopwordListStatus(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createStopwordList (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createStopwordList(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteStopwordList (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteStopwordList(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async listGateways (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.listGateways(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async createGateway (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.createGateway(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async getGateway (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.getGateway(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }
  async deleteGateway (params, url, apikey) {
    return new Promise((resolve, reject) => {
      if (this.delegate === undefined) {
        this.delegate = new _DiscoveryV1({ version: '2018-05-01', iam_apikey: apikey, url })
      }
      this.delegate.deleteGateway(params, (err, res) => {
        if (err) {
          return reject(err)
        }
        return resolve(res)
      })
    })
  }

  _yaml (archive) {
    const svc = {
      apiVersion: 'ibmcloud.seed.ibm.com/v1beta1',
      kind: 'Service',
      metadata: {
        name: this.name
      },
      spec: {
        service: 'discovery',
        plan: 'lite',
        servicetype: 'IAM'
      }
    }
    archive.addYaml(svc, this.name + '-svc.yaml')
  }
}

module.exports = DiscoveryV1
